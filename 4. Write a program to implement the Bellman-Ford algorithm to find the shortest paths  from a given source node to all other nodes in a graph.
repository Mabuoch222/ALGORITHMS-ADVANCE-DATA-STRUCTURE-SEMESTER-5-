#include <iostream>
#include <vector>
#include <climits> // For INT_MAX

using namespace std;

// Structure to represent an edge
struct Edge {
    int u, v;
    int weight;
};

// Bellman-Ford algorithm implementation
void bellmanFord(int V, int E, const vector<Edge>& edges, int source) {
    vector<int> dist(V, INT_MAX);
    dist[source] = 0;

    // Step 1: Relax all edges (V - 1) times
    for (int i = 0; i < V - 1; ++i) {
        for (int j = 0; j < E; ++j) {
            int u = edges[j].u;
            int v = edges[j].v;
            int weight = edges[j].weight;
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Step 2: Check for negative-weight cycles (not expected here)
    for (int j = 0; j < E; ++j) {
        int u = edges[j].u;
        int v = edges[j].v;
        int weight = edges[j].weight;
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains a negative weight cycle!" << endl;
            return;
        }
    }

    // Print the shortest distances
    cout << "Vertex\tDistance from Source " << source << endl;
    for (int i = 0; i < V; ++i) {
        if (dist[i] == INT_MAX)
            cout << i << "\t" << "INF" << endl;
        else
            cout << i << "\t" << dist[i] << endl;
    }
}

// Main function to test the Bellman-Ford algorithm
int main() {
    int V = 5; // Number of vertices
    int E = 7; // Number of edges

    vector<Edge> edges = {
        {0, 1, 6},
        {0, 2, 7},
        {1, 2, 8},
        {1, 3, 5},
        {1, 4, 4},
        {2, 3, 3},
        {3, 4, 2}
    };

    int source = 0;
    bellmanFord(V, E, edges, source);

    return 0;
}
