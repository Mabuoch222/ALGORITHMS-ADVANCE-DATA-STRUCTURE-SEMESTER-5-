#include <iostream>
#include <vector>
using namespace std;

// Function to compute the LPS (Longest Prefix Suffix) array
void computeLPSArray(const string& pattern, vector<int>& lps) {
    int length = 0; // Length of the previous longest prefix suffix
    lps[0] = 0;     // LPS for first character is always 0
    int i = 1;

    while (i < pattern.length()) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1]; // fallback
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// KMP search algorithm
void KMPSearch(const string& pattern, const string& text) {
    int m = pattern.length();
    int n = text.length();

    // Create LPS array
    vector<int> lps(m);
    computeLPSArray(pattern, lps);

    int i = 0; // index for text[]
    int j = 0; // index for pattern[]

    bool found = false;

    while (i < n) {
        if (pattern[j] == text[i]) {
            j++;
            i++;
        }

        if (j == m) {
            cout << "Pattern found at index " << i - j << endl;
            found = true;
            j = lps[j - 1]; // check for next match
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0)
                j = lps[j - 1]; // fallback in pattern
            else
                i++; // move to next character in text
        }
    }

    if (!found) {
        cout << "Pattern not found in the text." << endl;
    }
}

// Main function to test the KMP algorithm
int main() {
    string text = "ABABDABACDABABCABAB";
    string pattern = "ABABCABAB";

    KMPSearch(pattern, text);

    return 0;
}
