#include <iostream>
using namespace std;

// Forward declaration
class BTreeNode;

class BTree {
    BTreeNode* root;
    int t; // Minimum degree
public:
    BTree(int _t);  // Constructor

    void insert(int k);
    void traverse();
};

class BTreeNode {
    int* keys;     // Array of keys
    int t;         // Minimum degree
    BTreeNode** C; // Array of child pointers
    int n;         // Current number of keys
    bool leaf;     // Is true when node is leaf

public:
    BTreeNode(int t, bool leaf); // Constructor

    void traverse();             // Traverse all nodes in a subtree
    void insertNonFull(int k);   // Insert in non-full node
    void splitChild(int i, BTreeNode* y); // Split the child

    friend class BTree;
};

// === BTreeNode methods ===

BTreeNode::BTreeNode(int t1, bool leaf1) {
    t = t1;
    leaf = leaf1;

    keys = new int[2 * t - 1];
    C = new BTreeNode*[2 * t];
    n = 0;
}

void BTreeNode::traverse() {
    int i;
    for (i = 0; i < n; i++) {
        if (!leaf)
            C[i]->traverse();
        cout << keys[i] << " ";
    }

    if (!leaf)
        C[i]->traverse();
}

void BTreeNode::insertNonFull(int k) {
    int i = n - 1;

    if (leaf) {
        // Shift keys to make room
        while (i >= 0 && keys[i] > k) {
            keys[i + 1] = keys[i];
            i--;
        }

        keys[i + 1] = k;
        n++;
    }
    else {
        while (i >= 0 && keys[i] > k)
            i--;

        if (C[i + 1]->n == 2 * t - 1) {
            splitChild(i + 1, C[i + 1]);

            if (keys[i + 1] < k)
                i++;
        }

        C[i + 1]->insertNonFull(k);
    }
}

void BTreeNode::splitChild(int i, BTreeNode* y) {
    BTreeNode* z = new BTreeNode(y->t, y->leaf);
    z->n = t - 1;

    // Copy the last (t-1) keys of y to z
    for (int j = 0; j < t - 1; j++)
        z->keys[j] = y->keys[j + t];

    // Copy the last t children of y to z
    if (!y->leaf) {
        for (int j = 0; j < t; j++)
            z->C[j] = y->C[j + t];
    }

    y->n = t - 1;

    // Create space for new child
    for (int j = n; j >= i + 1; j--)
        C[j + 1] = C[j];

    C[i + 1] = z;

    // Move middle key of y to this node
    for (int j = n - 1; j >= i; j--)
        keys[j + 1] = keys[j];

    keys[i] = y->keys[t - 1];
    n++;
}

// === BTree methods ===

BTree::BTree(int _t) {
    root = nullptr;
    t = _t;
}

void BTree::traverse() {
    if (root != nullptr) root->traverse();
    cout << endl;
}

void BTree::insert(int k) {
    if (root == nullptr) {
        root = new BTreeNode(t, true);
        root->keys[0] = k;
        root->n = 1;
    }
    else {
        if (root->n == 2 * t - 1) {
            BTreeNode* s = new BTreeNode(t, false);
            s->C[0] = root;
            s->splitChild(0, root);

            int i = 0;
            if (s->keys[0] < k)
                i++;
            s->C[i]->insertNonFull(k);

            root = s;
        }
        else {
            root->insertNonFull(k);
        }
    }
}

// === Main function to test ===

int main() {
    BTree t(3); // A B-Tree with minimum degree 3

    t.insert(10);
    t.insert(20);
    t.insert(5);
    t.insert(6);
    t.insert(12);
    t.insert(30);
    t.insert(7);
    t.insert(17);

    cout << "Traversal of the constructed B-Tree is:\n";
    t.traverse();

    return 0;
}
