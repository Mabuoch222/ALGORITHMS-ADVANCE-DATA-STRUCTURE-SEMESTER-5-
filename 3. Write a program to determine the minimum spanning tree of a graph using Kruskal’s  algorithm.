#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <climits>
using namespace std;

struct Edge {
    int src, dest, weight;
    Edge(int s, int d, int w) : src(s), dest(d), weight(w) {}
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

class UnionFind {
private:
    vector<int> parent, rank;
    
public:
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        iota(parent.begin(), parent.end(), 0);
    }
    
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void unionSets(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        
        if (rootX != rootY) {
            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
};

class KruskalFromMatrix {
private:
    int vertices;
    
public:
    KruskalFromMatrix(int v) : vertices(v) {}
    
    vector<Edge> findMSTFromMatrix(const vector<vector<int>>& adjMatrix) {
        vector<Edge> edges;
        vector<Edge> mst;
        
        // Convert adjacency matrix to edge list
        for (int i = 0; i < vertices; i++) {
            for (int j = i + 1; j < vertices; j++) {
                if (adjMatrix[i][j] != 0) { // 0 means no edge
                    edges.emplace_back(i, j, adjMatrix[i][j]);
                }
            }
        }
        
        // Sort edges by weight
        sort(edges.begin(), edges.end());
        
        UnionFind uf(vertices);
        int edgesAdded = 0;
        
        for (const Edge& edge : edges) {
            if (edgesAdded == vertices - 1) {
                break;
            }
            
            if (uf.find(edge.src) != uf.find(edge.dest)) {
                mst.push_back(edge);
                uf.unionSets(edge.src, edge.dest);
                edgesAdded++;
            }
        }
        
        return mst;
    }
    
    void printMST(const vector<Edge>& mst) {
        int totalWeight = 0;
        
        cout << "Edge\t\tWeight" << endl;
        cout << "----\t\t------" << endl;
        
        for (const Edge& edge : mst) {
            cout << char('A' + edge.src) << " - " << char('A' + edge.dest);
            cout << "\t\t" << edge.weight << endl;
            totalWeight += edge.weight;
        }
        
        cout << "Total weight: " << totalWeight << endl;
    }
};

int main() {
    // Adjacency matrix representation
    vector<vector<int>> adjMatrix = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},  // A
        {4, 0, 8, 0, 0, 0, 0, 11, 0}, // B
        {0, 8, 0, 7, 0, 4, 0, 0, 2},  // C
        {0, 0, 7, 0, 9, 14, 0, 0, 0}, // D
        {0, 0, 0, 9, 0, 10, 0, 0, 0}, // E
        {0, 0, 4, 14, 10, 0, 2, 0, 0}, // F
        {0, 0, 0, 0, 0, 2, 0, 1, 6},  // G
        {8, 11, 0, 0, 0, 0, 1, 0, 7}, // H
        {0, 0, 2, 0, 0, 0, 6, 7, 0}   // I
    };
    
    KruskalFromMatrix kruskal(9);
    vector<Edge> mst = kruskal.findMSTFromMatrix(adjMatrix);
    
    cout << "Minimum Spanning Tree from Adjacency Matrix:" << endl;
    kruskal.printMST(mst);
    
    return 0;
}
